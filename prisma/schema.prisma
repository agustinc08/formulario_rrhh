generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Formulario {
  id             Int           @id @default(autoincrement())
  nombre         String
  preguntas      Pregunta[]
  respuestas     Respuesta[]
  secciones      Seccion[]
  inicio         Inicio?       @relation(fields: [inicioId], references: [id])
  inicioId       Int?
  tipoPreguntaId Int?
  tipoPregunta   TipoPregunta? @relation(fields: [tipoPreguntaId], references: [id])
  estaActivo     Boolean?
  dependencias   Dependencia   @relation(fields: [dependenciaId], references: [id])
  dependenciaId  Int
  edad           Edad?
  genero         Genero?
}

model Dependencia {
  id                Int          @id @default(autoincrement())
  nombreDependencia String
  respuestas        Respuesta[]
  claves            Clave[]
  comentarios       Comentario[]
  formularios       Formulario[]
  rol               Rol          @default(dependencia)
}

model Clave {
  id            Int         @id @default(autoincrement())
  dependenciaId Int
  dependencia   Dependencia @relation(fields: [dependenciaId], references: [id])
  clave         String
}

model Pregunta {
  id                    Int           @id @default(autoincrement())
  descripcion           String
  tieneComentario       Boolean       @default(false)
  descripcionComentario String?
  tipoPregunta          TipoPregunta? @relation(fields: [tipoPreguntaId], references: [id])
  tipoPreguntaId        Int?
  respuestas            Respuesta[]
  seccion               Seccion?      @relation(fields: [seccionId], references: [id])
  seccionId             Int?
  comentarios           Comentario[]
  formulario            Formulario    @relation(fields: [formularioId], references: [id])
  formularioId          Int
}

model Inicio {
  id                      Int          @id @default(autoincrement())
  tituloPrincipal         String
  introduccionDescripcion String?
  objetivoDescripcion     String?
  parrafo                 String?
  formulario              Formulario[]
}

model Seccion {
  id           Int        @id @default(autoincrement())
  descripcion  String
  preguntas    Pregunta[]
  formulario   Formulario @relation(fields: [formularioId], references: [id])
  formularioId Int
}

model Respuesta {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  pregunta        Pregunta      @relation(fields: [preguntaId], references: [id])
  preguntaId      Int
  comentarios     Comentario[]
  formularioId    Int
  formulario      Formulario    @relation(fields: [formularioId], references: [id])
  tipoRespuesta   TipoRespuesta @relation(fields: [tipoRespuestaId], references: [id])
  tipoRespuestaId Int
  dependencias    Dependencia   @relation(fields: [dependenciaId], references: [id])
  dependenciaId   Int
}

model Comentario {
  id            Int         @id @default(autoincrement())
  descripcion   String?
  comentario    String
  preguntaId    Int?
  pregunta      Pregunta?   @relation(fields: [preguntaId], references: [id])
  respuestaId   Int?
  respuesta     Respuesta?  @relation(fields: [respuestaId], references: [id])
  dependencia   Dependencia @relation(fields: [dependenciaId], references: [id])
  dependenciaId Int
}

model TipoPregunta {
  id            Int             @id @default(autoincrement())
  descripcion   String
  formulario    Formulario[]
  preguntas     Pregunta[]
  tipoRespuesta TipoRespuesta[]
}

model TipoRespuesta {
  id             Int          @id @default(autoincrement())
  descripcion    String
  tipoPregunta   TipoPregunta @relation(fields: [tipoPreguntaId], references: [id])
  tipoPreguntaId Int
  respuesta      Respuesta[]
}

enum Genero {
  MASCULINO
  FEMENINO
  OTRO
}

enum Edad {
  DESDE_18_A_45
  MAS_45
}

enum Rol {
  dependencia
  admin
}
